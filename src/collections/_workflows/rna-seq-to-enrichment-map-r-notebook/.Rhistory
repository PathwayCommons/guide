brca_hd_tep_se
type(brca_hd_tep_se)
typeof(brca_hd_tep_se)
class(brca_hd_tep_se)
SummarizedExperiment::assays(brca_hd_tep_se)$counts
knitr::kable(head(SummarizedExperiment::assay(brca_hd_tep_se)$counts)[, c(1,2,6,7)])
knitr::kable(head(SummarizedExperiment::assays(brca_hd_tep_se)$counts)[, c(1,2,6,7)])
library(edgeR)
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
se_counts <- SummarizedExperiment::assays(se)$counts
if(is(se, "RangedSummarizedExperiment")){
se_genes <- as.data.frame(SummarizedExperiment::rowRanges(se))
} else {
se_genes <- NULL
}
se_groups <- SummarizedExperiment::colData(se)$class
index_test <- se_groups == comparison[1]
index_test <- se_groups == comparison[1]
se_groups <- SummarizedExperiment::colData(se)$class
library(edgeR)
min_counts <- 1
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
brca_hd_tep_se_counts <- SummarizedExperiment::assays(brca_hd_tep_se)$counts
if(is(brca_hd_tep_se, "RangedSummarizedExperiment")){
brca_hd_tep_se_genes <- as.data.frame(SummarizedExperiment::rowRanges(brca_hd_tep_se))
} else {
brca_hd_tep_se_genes <- NULL
}
brca_hd_tep_se_groups <- SummarizedExperiment::colData(brca_hd_tep_se)$class
index_test_class <- brca_hd_tep_se_groups == comparison[1]
index_baseline_class <- brca_hd_tep_se_groups == comparison[2]
row_with_mincount <-
rowSums(edgeR::cpm(brca_hd_tep_se_counts) > min_counts) >= min(sum(index_baseline_class), sum(index_test_class))
index_test_class
library(edgeR)
### Minimum number of mapped read counts
min_counts <- 1
### Declare baseline (i.e. control) and test classes
### Differential expression expressed as test relative control
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
brca_hd_tep_se_counts <- SummarizedExperiment::assays(brca_hd_tep_se)$counts
### Fill in the 'group' metadata for our output edgeR::DGEList
brca_hd_tep_se_groups <- SummarizedExperiment::colData(brca_hd_tep_se)$class
index_test_class <- brca_hd_tep_se_groups == comparison[1]
index_baseline_class <- brca_hd_tep_se_groups == comparison[2]
### Find genes (rows) with a minimum number of counts
row_with_mincount <-
rowSums(edgeR::cpm(brca_hd_tep_se_counts) > min_counts) >=
min(sum(index_baseline_class), sum(index_test_class))
### Subset the original data accordingly
brca_hd_tep_dge_counts <- brca_hd_tep_se_counts[row_with_mincount,]
### Push the data into the edgeR::DGEList
brca_hd_tep_filtered_dge <-
edgeR::DGEList(counts = brca_hd_tep_dge_counts, group = brca_hd_tep_se_groups)
# brca_hd_tep_filtered_df <- as.data.frame(brca_hd_tep_filtered_dge)
# knitr::kable(head(brca_hd_tep_filtered_df))
brca_hd_tep_filtered_dge
getSlots(brca_hd_tep_filtered_dge)
getSlots(brca_hd_tep_filtered_dge, x = )
names(brca_hd_tep_filtered_dge)
?names
slotNames(brca_hd_tep_filtered_dge)
names(getSlots(brca_hd_tep_filtered_dge))
names(brca_hd_tep_filtered_dge)
brca_hd_tep_filtered_dge
brca_hd_tep_filtered_dge
knitr::kable(brca_hd_tep_filtered_dge$samples)
knitr::kable(brca_hd_tep_filtered_dge$counts)
knitr::kable(head(brca_hd_tep_filtered_dge$counts))
knitr::kable(head(brca_hd_tep_filtered_dge$counts)[, c(1,2,5,6)])
brca_hd_tep_tmm_normalized_dge <- emRNASeq::normalize_rseq(brca_hd_tep_filtered_dge)
brca_hd_tep_tmm_normalized_dge <- emRNASeq::normalize_rseq(brca_hd_tep_filtered_dge)
knitr::kable(brca_hd_tep_tmm_normalized_dge$samples)
brca_hd_tep_tmm_normalized_mat <- edgeR::cpm(brca_hd_tep_tmm_normalized_dge, normalized.lib.size=TRUE)
meta_df <- data.frame(
NAME = rownames(brca_hd_tep_tmm_normalized_mat),
DESCRIPTION = rownames(brca_hd_tep_tmm_normalized_mat),
check.names = FALSE)
rownames(brca_hd_tep_tmm_normalized_mat) <- NULL
brca_hd_tep_tmm_normalized_expression_df <- data.frame(meta_df, brca_hd_tep_tmm_normalized_mat,  check.names = FALSE)
brca_hd_tep_tmm_normalized_expression_df
dim(brca_hd_tep_tmm_normalized_expression_df)
names(brca_hd_tep_tmm_normalized_expression_df)
brca_hd_tep_tmm_normalized_dge <- emRNASeq::normalize_rseq(brca_hd_tep_filtered_dge)
knitr::kable(brca_hd_tep_tmm_normalized_dge$samples)
brca_hd_tep_tmm_normalized_mat <- edgeR::cpm(brca_hd_tep_tmm_normalized_dge, normalized.lib.size=TRUE)
meta_df <- data.frame(
NAME = rownames(brca_hd_tep_tmm_normalized_mat),
DESCRIPTION = rownames(brca_hd_tep_tmm_normalized_mat),
check.names = FALSE)
rownames(brca_hd_tep_tmm_normalized_mat) <- NULL
brca_hd_tep_tmm_normalized_expression_df <- data.frame(meta_df, brca_hd_tep_tmm_normalized_mat,  check.names = FALSE)
brca_hd_tep_tmm_normalized_mat <- edgeR::cpm(brca_hd_tep_tmm_normalized_dge, normalized.lib.size=TRUE)
meta_df <- data.frame(
NAME = rownames(brca_hd_tep_tmm_normalized_mat),
DESCRIPTION = rownames(brca_hd_tep_tmm_normalized_mat),
check.names = FALSE)
rownames(brca_hd_tep_tmm_normalized_mat) <- NULL
brca_hd_tep_tmm_normalized_expression_df <- data.frame(meta_df, brca_hd_tep_tmm_normalized_mat,  check.names = FALSE)
knitr::kable(head(brca_hd_tep_tmm_normalized_expression_df))
brca_hd_tep_tmm_normalized_mat <- edgeR::cpm(brca_hd_tep_tmm_normalized_dge, normalized.lib.size=TRUE)
meta_df <- data.frame(
NAME = rownames(brca_hd_tep_tmm_normalized_mat),
DESCRIPTION = rownames(brca_hd_tep_tmm_normalized_mat),
check.names = FALSE)
rownames(brca_hd_tep_tmm_normalized_mat) <- NULL
brca_hd_tep_tmm_normalized_expression_df <- data.frame(meta_df, brca_hd_tep_tmm_normalized_mat,  check.names = FALSE)
knitr::kable(head(brca_hd_tep_tmm_normalized_expression_df)[,c(1:4,8,9)])
brca_hd_tep_fitted_commondisp_dge <- edgeR::estimateCommonDisp(brca_hd_tep_tmm_normalized_dge)
brca_hd_tep_fitted_tagwise_dge <- edgeR::estimateTagwiseDisp(brca_hd_tep_fitted_commondisp_dge)
brca_hd_tep_de_tested_dge <- edgeR::exactTest(brca_hd_tep_fitted_tagwise_dge, pair = comparison)
brca_hd_tep_de_tested_tt <- edgeR::topTags(brca_hd_tep_de_tested_dge,
n = nrow(normalized_dge),
adjust.method = "BH",
sort.by = "PValue")
brca_hd_tep_fitted_commondisp_dge <- edgeR::estimateCommonDisp(brca_hd_tep_tmm_normalized_dge)
brca_hd_tep_fitted_tagwise_dge <- edgeR::estimateTagwiseDisp(brca_hd_tep_fitted_commondisp_dge)
brca_hd_tep_de_tested_dge <- edgeR::exactTest(brca_hd_tep_fitted_tagwise_dge, pair = comparison)
brca_hd_tep_de_tested_tt <- edgeR::topTags(brca_hd_tep_de_tested_dge,
n = nrow(brca_hd_tep_tmm_normalized_dge),
adjust.method = "BH",
sort.by = "PValue")
brca_hd_tep_de_tested_tt
names(brca_hd_tep_de_tested_tt)
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR", "SummarizedExperiment")
### Setup for Bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR", "SummarizedExperiment")
### Setup for Bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR", "SummarizedExperiment")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
### Setup for Bioconductor
source("https://bioconductor.org/biocLite.R")
biocLite("edgeR", "SummarizedExperiment")
install.packages("devtools")
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
### Bioconductor
# source("https://bioconductor.org/biocLite.R")
# biocLite("edgeR", "SummarizedExperiment")
### Other
# install.packages("devtools")
### Declare general file directory paths
base_dir <- getwd()
data_dir <- file.path(base_dir, "data")
### Declare paths to RNA-Seq (meta)data files
tep_rnaseq_metadata <- file.path(data_dir, "tep_rnaseq_metadata.txt")
tep_rnaseq_filelist <- c(file.path(data_dir, "MGH-BrCa-H-74_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-68_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-66_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-59_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-11_htsqct.txt"),
file.path(data_dir, "HD-5_htsqct.txt"),
file.path(data_dir, "HD-4_htsqct.txt"),
file.path(data_dir, "HD-3-1_htsqct.txt"),
file.path(data_dir, "HD-2-1_htsqct.txt"),
file.path(data_dir, "HD-1_htsqct.txt"))
library(devtools)
library("SummarizedExperiment")
devtools::install_github("jvwong/emRNASeq")
source_name <- "ensembl_gene_id"
target_name <- "hgnc_symbol"
species <- "human"
brca_hd_tep_se <- emRNASeq::merge_data(
tep_rnaseq_metadata,
species,
source_name,
target_name,
tep_rnaseq_filelist)
names(brca_hd_tep_se)
class(brca_hd_tep_se)
slots(brca_hd_tep_se)
typeof(brca_hd_tep_se)
str(attributes(brca_hd_tep_se))
brca_hd_tep_se$rowRanges
str(brca_hd_tep_se)
brca_hd_tep_se@rowRanges
brca_hd_tep_se@rowRanges
knitr::kable(brca_hd_tep_se@rowRanges)
knitr::kable(SummarizedExperiment::colData(brca_hd_tep_se))
y <- 1:10
y
str(y)
attributes(y)
attr(y, "my attribute")
attributes(y)
attr(y, "my attribute") <- "this is a vector"
attributes(y)
library(edgeR)
### Minimum number of mapped read counts per sample
min_counts <- 5
### Declare baseline (i.e. control) and test classes
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
brca_hd_tep_se_counts <- SummarizedExperiment::assays(brca_hd_tep_se)$counts
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
### CRAN
# install.packages("devtools")
### Bioconductor
# source("https://bioconductor.org/biocLite.R")
# biocLite("edgeR", "SummarizedExperiment")
### Declare general file directory paths
base_dir <- getwd()
data_dir <- file.path(base_dir, "data")
### Declare paths to RNA-Seq (meta)data files
tep_rnaseq_metadata <- file.path(data_dir, "tep_rnaseq_metadata.txt")
tep_rnaseq_filelist <- c(file.path(data_dir, "MGH-BrCa-H-74_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-68_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-66_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-59_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-11_htsqct.txt"),
file.path(data_dir, "HD-5_htsqct.txt"),
file.path(data_dir, "HD-4_htsqct.txt"),
file.path(data_dir, "HD-3-1_htsqct.txt"),
file.path(data_dir, "HD-2-1_htsqct.txt"),
file.path(data_dir, "HD-1_htsqct.txt"))
tep_rnaseq_metadata_df <- read.table(tep_rnaseq_metadata,header = TRUE)
knitr::kable(tep_rnaseq_metadata_df)
index_HD_1_htsqct <- grepl("HD-1_htsqct.txt", tep_rnaseq_filelist)
rnaseq_HD_1_htsqct <- read.table(tep_rnaseq_filelist[index_HD_1_htsqct],
check.names=FALSE)
knitr::kable(head(rnaseq_HD_1_htsqct), col.names=c("",""))
library(devtools)
library("SummarizedExperiment")
devtools::install_github("jvwong/emRNASeq")
source_name <- "ensembl_gene_id"
target_name <- "hgnc_symbol"
species <- "human"
brca_hd_tep_se <- emRNASeq::merge_data(
tep_rnaseq_metadata,
species,
source_name,
target_name,
tep_rnaseq_filelist)
knitr::kable(head(brca_hd_tep_filtered_dge[["counts"]])[, c(1,2,5,6)])
knitr::opts_chunk$set(echo = TRUE, message = FALSE, warning = FALSE, cache = TRUE)
### CRAN
# install.packages("devtools")
### Bioconductor
# source("https://bioconductor.org/biocLite.R")
# biocLite("edgeR", "SummarizedExperiment")
### Declare general file directory paths
base_dir <- getwd()
data_dir <- file.path(base_dir, "data")
### Declare paths to RNA-Seq (meta)data files
tep_rnaseq_metadata <- file.path(data_dir, "tep_rnaseq_metadata.txt")
tep_rnaseq_filelist <- c(file.path(data_dir, "MGH-BrCa-H-74_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-68_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-66_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-59_htsqct.txt"),
file.path(data_dir, "MGH-BrCa-H-11_htsqct.txt"),
file.path(data_dir, "HD-5_htsqct.txt"),
file.path(data_dir, "HD-4_htsqct.txt"),
file.path(data_dir, "HD-3-1_htsqct.txt"),
file.path(data_dir, "HD-2-1_htsqct.txt"),
file.path(data_dir, "HD-1_htsqct.txt"))
tep_rnaseq_metadata_df <- read.table(tep_rnaseq_metadata,header = TRUE)
knitr::kable(tep_rnaseq_metadata_df)
index_HD_1_htsqct <- grepl("HD-1_htsqct.txt", tep_rnaseq_filelist)
rnaseq_HD_1_htsqct <- read.table(tep_rnaseq_filelist[index_HD_1_htsqct],
check.names=FALSE)
knitr::kable(head(rnaseq_HD_1_htsqct), col.names=c("",""))
library(devtools)
library("SummarizedExperiment")
devtools::install_github("jvwong/emRNASeq")
source_name <- "ensembl_gene_id"
target_name <- "hgnc_symbol"
species <- "human"
brca_hd_tep_se <- emRNASeq::merge_data(
tep_rnaseq_metadata,
species,
source_name,
target_name,
tep_rnaseq_filelist)
brca_hd_tep_se
knitr::kable(SummarizedExperiment::colData(brca_hd_tep_se))
brca_hd_tep_rowRanged_df <- as.data.frame(SummarizedExperiment::rowRanges(brca_hd_tep_se))
knitr::kable(head(brca_hd_tep_rowRanged_df))
dim(brca_hd_tep_rowRanged_df)
knitr::kable(head(SummarizedExperiment::assays(brca_hd_tep_se)$counts)[, c(1,2,6,7)])
knitr::kable(head(SummarizedExperiment::assays(brca_hd_tep_se)[[counts]])[, c(1,2,6,7)])
knitr::kable(head(SummarizedExperiment::assays(brca_hd_tep_se)[["counts"]])[, c(1,2,6,7)])
library(edgeR)
### Minimum number of mapped read counts per sample
min_counts <- 5
### Declare baseline (i.e. control) and test classes
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
brca_hd_tep_se_counts <- SummarizedExperiment::assays(brca_hd_tep_se)[["counts"]]
brca_hd_tep_se_groups <- SummarizedExperiment::colData(brca_hd_tep_se)[["class"]]
### Find genes (rows) with a minimum number of counts
index_test_class <- brca_hd_tep_se_groups == comparison[1]
index_baseline_class <- brca_hd_tep_se_groups == comparison[2]
row_with_mincount <-
rowSums(edgeR::cpm(brca_hd_tep_se_counts) > min_counts) >=
min(sum(index_baseline_class), sum(index_test_class))
### Subset the original data accordingly
brca_hd_tep_dge_counts <- brca_hd_tep_se_counts[row_with_mincount,]
### Push the data into the edgeR::DGEList
brca_hd_tep_filtered_dge <-
edgeR::DGEList(counts = brca_hd_tep_dge_counts, group = brca_hd_tep_se_groups)
library(edgeR)
### Minimum number of mapped read counts per sample
min_counts <- 5
### Declare baseline (i.e. control) and test classes
baseline_class <- "HD"
test_class <- "BrCa"
comparison <- c(baseline_class, test_class)
brca_hd_tep_se_counts <- SummarizedExperiment::assays(brca_hd_tep_se)[["counts"]]
brca_hd_tep_se_group <- SummarizedExperiment::colData(brca_hd_tep_se)[["class"]]
### Find genes (rows) with a minimum number of counts
index_test_class <- brca_hd_tep_se_group == comparison[1]
index_baseline_class <- brca_hd_tep_se_group == comparison[2]
row_with_mincount <-
rowSums(edgeR::cpm(brca_hd_tep_se_counts) > min_counts) >=
min(sum(index_baseline_class), sum(index_test_class))
### Subset the original data accordingly
brca_hd_tep_dge_counts <- brca_hd_tep_se_counts[row_with_mincount,]
### Push the data into the edgeR::DGEList
brca_hd_tep_filtered_dge <-
edgeR::DGEList(counts = brca_hd_tep_dge_counts, group = brca_hd_tep_se_group)
knitr::kable(head(brca_hd_tep_filtered_dge[["counts"]])[, c(1,2,5,6)])
knitr::kable(brca_hd_tep_filtered_dge[["samples"]]")
knitr::kable(brca_hd_tep_filtered_dge[["samples"]])
brca_hd_tep_tmm_normalized_dge <- emRNASeq::normalize_rseq(brca_hd_tep_filtered_dge)
knitr::kable(brca_hd_tep_tmm_normalized_dge[["samples"]])
brca_hd_tep_tmm_normalized_mat <- edgeR::cpm(brca_hd_tep_tmm_normalized_dge, normalized.lib.size=TRUE)
meta_df <- data.frame(
NAME = rownames(brca_hd_tep_tmm_normalized_mat),
DESCRIPTION = rownames(brca_hd_tep_tmm_normalized_mat),
check.names = FALSE)
rownames(brca_hd_tep_tmm_normalized_mat) <- NULL
brca_hd_tep_tmm_normalized_expression_df <- data.frame(meta_df, brca_hd_tep_tmm_normalized_mat,  check.names = FALSE)
knitr::kable(head(brca_hd_tep_tmm_normalized_expression_df)[,c(1:4,8,9)])
### Calculate variability (dispersions) in data
brca_hd_tep_fitted_commondisp_dge <- edgeR::estimateCommonDisp(brca_hd_tep_tmm_normalized_dge)
brca_hd_tep_fitted_tagwise_dge <- edgeR::estimateTagwiseDisp(brca_hd_tep_fitted_commondisp_dge)
### Perform differential expression testing (comparison is 'BrCa' vs 'HD')
brca_hd_tep_de_tested_dge <- edgeR::exactTest(brca_hd_tep_fitted_tagwise_dge, pair = comparison)
### Perform multiple-testing correction using Benjamini-Hockberg procedure
brca_hd_tep_de_tested_tt <- edgeR::topTags(brca_hd_tep_de_tested_dge,
n = nrow(brca_hd_tep_tmm_normalized_dge),
adjust.method = "BH",
sort.by = "PValue")
knitr::kable(head(brca_hd_tep_de_tested_tt))
brca_hd_tep_de_tested_tt
class(brca_hd_tep_de_tested_tt)
names(brca_hd_tep_de_tested_tt)
typeof(brca_hd_tep_de_tested_tt)
head(brca_hd_tep_de_tested_tt)
(brca_hd_tep_de_tested_tt$table)
head(brca_hd_tep_de_tested_tt$table)
names(brca_hd_tep_de_tested_tt)
### Calculate variability (dispersions) in data
brca_hd_tep_fitted_commondisp_dge <- edgeR::estimateCommonDisp(brca_hd_tep_tmm_normalized_dge)
brca_hd_tep_fitted_tagwise_dge <- edgeR::estimateTagwiseDisp(brca_hd_tep_fitted_commondisp_dge)
### Perform differential expression testing (comparison is 'BrCa' vs 'HD')
brca_hd_tep_de_tested_dge <- edgeR::exactTest(brca_hd_tep_fitted_tagwise_dge, pair = comparison)
### Perform multiple-testing correction using Benjamini-Hockberg procedure
brca_hd_tep_de_tested_tt <- edgeR::topTags(brca_hd_tep_de_tested_dge,
n = nrow(brca_hd_tep_tmm_normalized_dge),
adjust.method = "BH",
sort.by = "PValue")
knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
names(brca_hd_tep_de_tested_tt)
knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
### Calculate variability (dispersions) in data
brca_hd_tep_fitted_commondisp_dge <- edgeR::estimateCommonDisp(brca_hd_tep_tmm_normalized_dge)
brca_hd_tep_fitted_tagwise_dge <- edgeR::estimateTagwiseDisp(brca_hd_tep_fitted_commondisp_dge)
### Perform differential expression testing (comparison is 'BrCa' vs 'HD')
brca_hd_tep_de_tested_dge <- edgeR::exactTest(brca_hd_tep_fitted_tagwise_dge, pair = comparison)
### Perform multiple-testing correction using Benjamini-Hockberg procedure
brca_hd_tep_de_tested_tt <- edgeR::topTags(brca_hd_tep_de_tested_dge,
n = nrow(brca_hd_tep_tmm_normalized_dge),
adjust.method = "BH",
sort.by = "PValue")
knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
brca_hd_tep_de_tested_tt[["table"]]
head(brca_hd_tep_de_tested_tt[["table"]])
# knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
head(brca_hd_tep_de_tested_tt[["table"]])
brca_hd_tep_de_tested_df <- as.data.frame(head(brca_hd_tep_de_tested_tt[["table"]]))
knitr::kable(brca_hd_tep_de_tested_df)
knitr::kable(head(brca_hd_tep_de_tested_tt[["table"]]))
rank_values <- sign(brca_hd_tep_de_tested_tt[["table"]][["logFC"]]) * (-1) * log10(brca_hd_tep_de_tested_tt[["table"]][["PValue"]])
brca_hd_tep_rank_values_max <- max(brca_hd_tep_rank_values[ brca_hd_tep_rank_values != Inf ])
brca_hd_tep_rank_values <- sign(brca_hd_tep_de_tested_tt[["table"]][["logFC"]]) * (-1) * log10(brca_hd_tep_de_tested_tt[["table"]][["PValue"]])
brca_hd_tep_rank_values_max <- max(brca_hd_tep_rank_values[ brca_hd_tep_rank_values != Inf ])
rank_values_unique <- sapply( brca_hd_tep_rank_values, function(x) replace(x, is.infinite(x), sign(x) * (brca_hd_tep_rank_values_max + runif(1))) )
genenames <- (rownames(brca_hd_tep_de_tested_tt[["table"]]))
brca_hd_tep_rank_values_unique
brca_hd_tep_rank_values_max <- max(brca_hd_tep_rank_values[ brca_hd_tep_rank_values != Inf ])
brca_hd_tep_rank_values_unique <- sapply( brca_hd_tep_rank_values, function(x) replace(x, is.infinite(x), sign(x) * (brca_hd_tep_rank_values_max + runif(1))) )
brca_hd_tep_rank_values <- sign(brca_hd_tep_de_tested_tt[["table"]][["logFC"]]) * (-1) * log10(brca_hd_tep_de_tested_tt[["table"]][["PValue"]])
brca_hd_tep_rank_values_max <- max(brca_hd_tep_rank_values[ brca_hd_tep_rank_values != Inf ])
brca_hd_tep_rank_values_unique <- sapply( brca_hd_tep_rank_values,
function(x) replace(x, is.infinite(x),
sign(x) * (brca_hd_tep_rank_values_max + runif(1))) )
genenames <- (rownames(brca_hd_tep_de_tested_tt[["table"]]))
brca_hd_tep_ranks_df <- data.frame(gene=genenames,
rank=brca_hd_tep_rank_values_unique,
stringsAsFactors = FALSE)
brca_hd_tep_ordered_ranks_df <- brca_hd_tep_ranks_df[order(brca_hd_tep_ranks_df[,2], decreasing = TRUE), ]
brca_hd_tep_ordered_ranks_df
head(brca_hd_tep_ordered_ranks_df)
log10(0)
### Rank by inverse of p-value taking into account 'sign' of change in BrCa (i.e. increase/decrease) relative to HD
brca_hd_tep_rank_values <- sign(brca_hd_tep_de_tested_tt[["table"]][["logFC"]]) * (-1) * log10(brca_hd_tep_de_tested_tt[["table"]][["PValue"]])
### Take into account log10(0) = -Inf
brca_hd_tep_rank_values_max <- max(brca_hd_tep_rank_values[ brca_hd_tep_rank_values != Inf ])
brca_hd_tep_rank_values_unique <- sapply( brca_hd_tep_rank_values,
function(x) replace(x, is.infinite(x),
sign(x) * (brca_hd_tep_rank_values_max + runif(1))) )
### Construct the data frame we wish place into a tabular file
genenames <- (rownames(brca_hd_tep_de_tested_tt[["table"]]))
brca_hd_tep_ranks_df <- data.frame(gene=genenames,
rank=brca_hd_tep_rank_values_unique,
stringsAsFactors = FALSE)
brca_hd_tep_ordered_ranks_df <- brca_hd_tep_ranks_df[order(brca_hd_tep_ranks_df[,2], decreasing = TRUE), ]
head(brca_hd_tep_de_tested_df)
head(brca_hd_tep_ordered_ranks_df)
knitr::kable(head(brca_hd_tep_ordered_ranks_df))
knitr::kable(head(brca_hd_tep_ordered_ranks_df, n=10))
knitr::kable(head(brca_hd_tep_ordered_ranks_df, n=10))
knitr::kable(tail(brca_hd_tep_ordered_ranks_df, n=10))
output <- rbind(head(brca_hd_tep_ordered_ranks_df, n=10), tail(brca_hd_tep_ordered_ranks_df, n=10))
knitr::kable(output)
output <- rbind(head(brca_hd_tep_ordered_ranks_df, n=10), tail(brca_hd_tep_ordered_ranks_df, n=10))
rownames(output) <- NULL
knitr::kable(output)
output <- rbind(head(brca_hd_tep_ordered_ranks_df, n=5), c("",""), tail(brca_hd_tep_ordered_ranks_df, n=5))
rownames(output) <- NULL
knitr::kable(output)
output <- rbind(head(brca_hd_tep_ordered_ranks_df, n=5), c(0,0), tail(brca_hd_tep_ordered_ranks_df, n=5))
rownames(output) <- NULL
knitr::kable(output)
output <- rbind(head(brca_hd_tep_ordered_ranks_df, n=5), c(NA,NA), tail(brca_hd_tep_ordered_ranks_df, n=5))
rownames(output) <- NULL
knitr::kable(output)
knitr::kable(head(brca_hd_tep_ordered_ranks_df, n=5))
knitr::kable(tail(brca_hd_tep_ordered_ranks_df, n=5))
ranks_head <- head(brca_hd_tep_ordered_ranks_df, n=5)
ranks_tail <- tail(brca_hd_tep_ordered_ranks_df, n=5)
rownames(ranks_head) <- NULL
rownames(ranks_tail) <- NULL
knitr::kable(ranks_head)
ranks_head <- head(brca_hd_tep_ordered_ranks_df, n=5)
ranks_tail <- tail(brca_hd_tep_ordered_ranks_df, n=5)
rownames(ranks_head) <- NULL
rownames(ranks_tail) <- NULL
knitr::kable(ranks_head)
knitr::kable(ranks_tail)
knitr::kable(ranks_tail)
ranks_tail <- tail(brca_hd_tep_ordered_ranks_df, n=5)
rownames(ranks_tail) <- NULL
knitr::kable(ranks_tail)
ranks_tail <- tail(brca_hd_tep_ordered_ranks_df, n=5)
rownames(ranks_tail) <- NULL
knitr::kable(ranks_tail)
n_samples <- dim(brca_hd_tep_filtered_dge)[2]
n_classes <- 2
l1 <- paste(n_samples, n_classes, "1")
l2 <- paste("#", brca_hd_tep_de_tested_tt[["comparison"]][1], brca_hd_tep_de_tested_tt[["comparison"]][2])
l3 <- paste(brca_hd_tep_filtered_dge[["samples"]][["group"]], collapse = " ")
brca_hd_tep_cls <- rbind(l1, l2, l3)
brca_hd_tep_cls
rownames(ranks_tail) <- NULL
knitr::kable(brca_hd_tep_cls )
rownames(brca_hd_tep_cls) <- NULL
knitr::kable(brca_hd_tep_cls)
typeof(brca_hd_tep_cls)
class(brca_hd_tep_cls)
setwd("~/Downloads/")
ll
emGmt <- readRDS("emGmt.rds")
getwd()
emGmt <- readRDS("./enrichmentmap-demo-master/emGmt.rds")
emGmt
names(meGmt)
str(emGmt)
path <- file.path(~)
path <- file.path("~")
path
path <- file.path("~/Downloads/")
path
paste("java -cp" ,path)
hey<- "hey"
you<-"you"
paste(hey, you)
gsea_analysis_name <- ""
gsea_jar_path <- "/Users/jeffreywong/bin/gsea2-2.2.3.jar"
command <- paste("java -cp", gsea_jar,
"-Xmx1G  xtools.gsea.GseaPreranked",
"-gmx", dest_gmt_file,
"-rnk", paste(working_dir,rnk_file,sep="/"),
"-collapse false -nperm 1000 -permute gene_set -scoring_scheme weighted -rpt_label ", analysis_name,
"  -num 100 -plot_top_x 20 -rnd_seed 12345  -set_max 200 -set_min 15 -zip_report false -out" ,
working_dir, "-gui false > gsea_output.txt",sep=" "
)
setwd("~/Projects/PathwayCommons/web/guide_development/guide/src/collections/_workflows/rna-seq-to-enrichment-map-r-notebook/")
getwd()
